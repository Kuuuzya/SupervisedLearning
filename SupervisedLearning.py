#!/usr/bin/env python
# coding: utf-8

# **–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** https://github.com/Kuuuzya/SupervisedLearning

# <h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ<span class="tocSkip"></span></h1>
# <div class="toc"><ul class="toc-item"><li><span><a href="#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö" data-toc-modified-id="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a></span></li><li><span><a href="#–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏" data-toc-modified-id="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</a></span></li><li><span><a href="#–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º" data-toc-modified-id="–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>–ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º</a></span></li><li><span><a href="#–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏" data-toc-modified-id="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span></li><li><span><a href="#–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞" data-toc-modified-id="–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>–ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</a></span></li></ul></div>

# # –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤

# –ò–∑ ¬´–ë–µ—Ç–∞-–ë–∞–Ω–∫–∞¬ª —Å—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –∑–∞–º–µ—Ç–Ω–æ. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö.
# 
# –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –±–∞–Ω–∫–æ–º. 
# 
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º *F1*-–º–µ—Ä—ã. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫—É –¥–æ 0.59. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ *F1*-–º–µ—Ä—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
# 
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ *AUC-ROC*, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Å *F1*-–º–µ—Ä–æ–π.
# 
# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling](https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling)

# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# –ü–µ—Ä–µ–¥–æ –º–Ω–æ–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–± –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ë–µ—Ç–∞-–±–∞–Ω–∫–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏ —Å –ø–æ–º–æ—â—å—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –∏–ª–∏ –Ω–µ—Ç, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π —Å–º–æ–≥–ª–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å —Ç–µ –∏–ª–∏ –∏–Ω—ã–µ —à–∞–≥–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –∏–∑—É—á–∏–º –∏—Ö.

# In[1]:


#–í—Å–µ –∏–º–ø–æ—Ä—Ç—ã, –∞ –∏—Ö –±—É–¥–µ—Ç –º–Ω–æ–≥–æ, —Å–æ–±–∏—Ä–∞—é —Ç—É—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—è —è—á–µ–π–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.tree import DecisionTreeClassifier 
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import mean_absolute_error, r2_score, confusion_matrix,f1_score, recall_score, precision_score, precision_recall_curve,roc_curve, roc_auc_score 
from sklearn.utils import shuffle
from sklearn.preprocessing import StandardScaler


# In[2]:


#–ø–æ–ø—Ä–æ–±—É–µ–º —Å—á–∏—Ç–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª–æ–∂–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é. –í—ã–¥–∞–¥–∏–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.
try:
    data = pd.read_csv('./Churn.csv')
    print('–î–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data')
except:
    print('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç')


# In[3]:


#–ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
data.shape[0]


# 10 —Ç—ã—Å—è—á –∑–∞–ø–∏—Å–µ–π. –ù–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ–ø–ª–æ—Ö–æ, –µ—Å—Ç—å, —Å —á–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å. 
# –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Ç–∞–º —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ –∏ –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å

# In[4]:


data.info()


# –ù–µ–ø–ª–æ—Ö–æ, –±—ã–≤–∞–ª–∏ –¥–∞—Ç–∞—Å–µ—Ç—ã –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ –∏ –ø–æ—Ö—É–∂–µ. 
# –ü—Ä–æ–±–ª–µ–º–∞ —Ç–æ–ª—å–∫–æ —Å –∫–æ–ª–æ–Ω–∫–æ–π Tenure ‚Äî —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∫–ª–∏–µ–Ω—Ç –±—ã–ª –≤ –±–∞–Ω–∫–µ.
# –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç –≥–ª–∞–∑–∞–º–∏.

# In[5]:


data.head(50)


# –í—Å—ë —á–∏—Å—Ç–µ–Ω—å–∫–æ. –ù–æ –ø—Ä–æ–ø—É—Å–∫–∏ –Ω–∞–¥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å. –õ–æ–≥–∏—á–Ω—ã–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ.
# –ú–æ–∂–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ, –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º –∏–ª–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º –∑–∞—Ä–ø–ª–∞—Ç, –∏–ª–∏ –ø–æ –ø–æ–ª—É. –ù–æ —ç—Ç–æ –º–µ–Ω–µ–µ 10%,
# —Ç–∞–∫ —á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –ø—Ä–µ–Ω–µ–±—Ä–µ—á—å. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å —Ç–∞–º —Å–æ —Å—Ä–µ–¥–Ω–∏–º.

# In[6]:


data['Tenure'].mean()


# –ü–æ—á—Ç–∏ 5 –ª–µ—Ç –∫–ª–∏–µ–Ω—Ç –±–∞–Ω–∫–∞. –í—ã–≥–ª—è–¥–∏—Ç –ª–æ–≥–∏—á–Ω—ã–º, –Ω–∞ —Ä–∞–±–æ—Ç—É –º–æ–¥–µ–ª–µ–π —Å–∏–ª—å–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ.
# –û–∫—Ä—É–≥–ª–∏–º –¥–æ 5, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º–∏, –∞ —Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ-—Ç–æ –≤—Å–µ —Ü–µ–ª—ã–µ.

# In[7]:


data['Tenure'] = data['Tenure'].fillna(5)


# In[8]:


data.info()


# In[9]:


data['Tenure'].mean()


# –ò –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ—Ç, –∏ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ó–∞—Ç–æ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –¥–∞–ª—å—à–µ.

# –£ –Ω–∞—Å –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –µ—Å—Ç—å 3 –∫–æ–ª–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ. –ê –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ) —Å —Ç–∞–∫–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —É–º–µ—é—Ç. –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–≤–µ–¥—ë–º –∏—Ö –≤ –¥–∞–º–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏.
# 
# –ê —Ñ–∞–º–∏–ª–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –≤–æ–æ–±—â–µ —É–¥–∞–ª–∏–º, –æ–Ω–∏ –Ω–∞–º –¥–ª—è –º–æ–¥–µ–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –Ω—É–∂–Ω—ã!

# In[10]:


data = data.drop(columns = ['Surname'], axis=1)
data = data.drop(columns = ['RowNumber'], axis=1)


# In[11]:


data_ohe = pd.get_dummies(data, drop_first=True)


# In[12]:


data_ohe.head()


# –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫ (–ø—Ä–∏–≤–µ—Ç, —Ñ–∞–º–∏–ª–∏–∏), –∑–∞—Ç–æ —Ç–µ–ø–µ—Ä—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏—Ç—Å—è. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –ø–æ–ª—É—á–∏—Ç—Å—è –ª–∏ —É –Ω–∞—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# P.S. –ê—Ö –¥–∞, —É –Ω–∞—Å –µ—â—ë –µ—Å—Ç—å –ø–æ—Ç—Ä—è—Å–∞—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ CustomerID, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–æ –Ω–µ –¥–∞—ë—Ç, –Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–∞ –Ω–µ—ë —Ç–æ—á–Ω–æ –±—É–¥—É—Ç –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–µ–¥—å —ç—Ç–æ —á–∏—Å–ª–æ. –î–∞, –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–≤–Ω–æ —Å –Ω–∞–º–∏ –∫–ª–∏–µ–Ω—Ç, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä Tenure. –¢–∞–∫ —á—Ç–æ, –¥—É–º–∞—é, —á—Ç–æ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ—á–Ω–æ –º–æ–∂–Ω–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –±–µ–∑ —Å–æ–∂–∞–ª–µ–Ω–∏—è.

# In[13]:


data_ohe = data_ohe.drop(columns = ['CustomerId'], axis=1)


# <div class="alert alert-info"> <b>üéì –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> –°–ø–∞—Å–∏–±–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–æ –º–Ω–µ –Ω–∞–¥–æ –≤—á–∏—Ç–∞—Ç—å—Å—è –∏ –ø–æ–Ω—è—Ç—å.</div>

# In[14]:


data_ohe.head()


# –í–æ—Ç —Ç–µ–ø–µ—Ä—å –≤—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ. –ö—Ä–æ–º–µ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞, –Ω–æ –µ–≥–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º —á—É—Ç—å –ø–æ–∑–∂–µ –∏ –ø—Ä–∏–¥—É–º–∞–µ–º, –∫–∞–∫ —Å –Ω–∏–º –±—ã—Ç—å.

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# –ß—Ç–æ –∂, –º—ã –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å—Ç–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥–Ω–∞—Ç—å –µ–≥–æ –≤ –º–æ–¥–µ–ª—å —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≤–¥—Ä—É–≥ —É–∂–µ –≤—Å—ë —Ö–æ—Ä–æ—à–æ –∏ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–æ–±—å—ë–º –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫–∏. –¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ —É –Ω–∞—Å ‚Äî —ç—Ç–æ Exited, —É—à—ë–ª –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –∏–ª–∏ –Ω–µ—Ç (1 - —É—à—ë–ª, 0 - –Ω–µ —É—à–µ–ª)

# In[15]:


#—Ä–∞–∑–±–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä–∫—É –∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫
target = data_ohe['Exited']
features = data_ohe.drop(['Exited'] , axis=1)

#—Ä–∞–∑–±–∏–≤–∞–µ–º –≤—ã–±–æ—Ä–∫—É –∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ 75/25
features_train, features_valid, target_train, target_valid = train_test_split(
    features, target, test_size=0.2, random_state=12345)

features_train, features_test, target_train, target_test = train_test_split(
    features_train, target_train, test_size=0.25, random_state=12345)


# In[16]:


print('–†–∞–∑–º–µ—Ä train:',features_train.shape[0])
print('–†–∞–∑–º–µ—Ä valid:',features_valid.shape[0])
print('–†–∞–∑–º–µ—Ä test:',features_test.shape[0])


# –†–∞–∑–±–∏–ª–∏ –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ 60,20 –∏ 20%.

# –¢.–∫. —É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–Ω—ã–π –º–∞—Å—à—Ç–∞–±, –∞ –∏–º–µ–Ω–Ω–æ, —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä. –£ –Ω–∏—Ö —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—è–¥–∫–∏. –ß—Ç–æ–±—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å—ë –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É, —Å–¥–µ–ª–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.

# In[17]:


data_ohe.head(5)


# In[18]:


numeric = ['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary']


# In[19]:


scaler = StandardScaler()
scaler.fit(features_train[numeric])


# In[20]:


pd.options.mode.chained_assignment = None

features_train[numeric] = scaler.transform(features_train[numeric])
features_valid[numeric] = scaler.transform(features_valid[numeric])
features_test[numeric] = scaler.transform(features_test[numeric])


# In[21]:


features_train.head(5)


# –ö–æ–Ω–µ—á–Ω–æ, –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –∫–∞–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –≤ –±–∞–Ω–∫–µ –∏ –∑–∞—Ä–ø–ª–∞—Ç–∞. –ù–æ —Ç–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞—à–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–Ω–∏ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –º–æ–¥–µ–ª—å.

# In[22]:


#–ù–∞—á–Ω—ë–º —Å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏
try:
    model_LR = LogisticRegression(random_state=12345, solver='liblinear')
    model_LR.fit(features_train, target_train)
    print('–ú–æ–¥–µ–ª—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')


# In[23]:


#–ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
predicted_valid_LR = model_LR.predict(features_valid)

# print("R2 –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö: ", r2_score(target_valid, predicted_valid_LR))
# print("R2 –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: ", model_LR.score(features_train, target_train))
# print("R2 –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ: ", model_LR.score(features_valid, target_valid))

print("F1: ", f1_score(target_valid, predicted_valid_LR))


#  ~~–ú–µ—Ç—Ä–∏–∫–∞ R2 –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —Ö–æ—Ç—å –∏ –æ–∫–æ–ª–æ 0, –Ω–æ —ç—Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–± –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏. –ê –≤–æ—Ç –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ –≤—Å—ë –æ–∫. –ü–æ–ø—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞. ~~

# –ú–µ—Ç—Ä–∏–∫–∞ F1 –Ω–∏–∑–∫–∞—è. –ó–Ω–∞—á–∏—Ç, —ç—Ç–∞ –º–æ–¥–µ–ª—å –Ω–∞–º –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç. –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ—Ä–µ–≤–æ.

# In[24]:


try:
    model_DTC = DecisionTreeClassifier(random_state=12345)
    model_DTC.fit(features_train, target_train)
    print('–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')


# In[25]:


#–ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
predicted_valid_DTC = model_DTC.predict(features_valid)

# print("R2 –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö: ", r2_score(predicted_valid_DTC, target_valid))
# print("R2 –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: ", model_DTC.score(features_train, target_train))
# print("R2 –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ: ", model_DTC.score(features_valid, target_valid))

print("F1: ", f1_score(target_valid, predicted_valid_DTC))


# –ê –≤–æ—Ç —Ç—É—Ç F1 —É–∂–µ –Ω–µ–ø–ª–æ—Ö–∞—è, –±–æ–ª—å—à–µ 0.5, –ø—Ä–∏ —Ü–µ–ª–µ–≤–æ–º 0.59 —ç—Ç–æ –æ—á–µ–Ω—å –Ω–µ–ø–ª–æ—Ö–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

#  ~~–õ—É—á—à–µ, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ. –ü–æ–ø—Ä–æ–±—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å, –ø—Ä–∏—á—ë–º —Å—Ä–∞–∑—É —Å –ø–µ—Ä–µ–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. ~~

# In[26]:


# model_RFR = RandomForestRegressor(random_state=12345, n_estimators=2, max_depth=5)
# model_RFR.fit(features_train, target_train)
# predicted_valid_RFR = model_RFR.predict(features_valid)

    
# print("F1: ", f1_score(target_valid, predicted_valid_RFR))


# In[43]:


get_ipython().run_cell_magic('time', '', 'best_depth = 0\nbest_est = 0\n#best_r2 = -1\nbest_f1 = 0\n\nfor depth in range(1,20,1):\n    for est in range(20,100,10):\n        model_RFC = RandomForestClassifier(random_state=12345, n_estimators=est, max_depth=depth)\n        model_RFC.fit(features_train, target_train)\n        predicted_valid_RFC = model_RFC.predict(features_valid)\n       \n#if f1_score(target_valid,predicted_valid_RFC) > best_f1 :\n#         #best_r2 = r2_score(predicted_valid_RFR, target_valid)\n#         best_f1 = f1_score(target_valid,predicted_valid_RFC)\n#         best_depth = depth\n#         best_est = est\n#         model_RFC = RandomForestClassifier(random_state=12345, n_estimators=best_est, max_depth=best_depth)\n#         model_RFC.fit(features_train, target_train)\n#         predicted_valid_RFC = model_RFC.predict(features_valid)\n        \n    if f1_score(target_valid,predicted_valid_RFC) > best_f1 :\n        best_f1 = f1_score(target_valid,predicted_valid_RFC)\n        best_depth = depth\n        best_est = est\n        best_model = model_RFC\n        best_predict_val = predicted_valid_RFC\n        print(best_f1)\n\nprint(\'–ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞\')\nprint(\'–õ—É—á—à–∞—è –≥–ª—É–±–∏–Ω–∞: \', best_depth)\nprint(\'–õ—É—á—à–µ–µ –∫–æ–ª-–≤–æ: \', best_est)\n# print(\'R2 –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö: \', best_r2)\n# print("R2 –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: ", model_RFR.score(features_train, target_train))\n# print("R2 –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ: ", model_RFR.score(features_valid, target_valid))\nprint(\'F1: \', best_f1)')


# In[44]:


f1_score(target_valid,best_predict_val)


# –ü–æ–ª—É—á–∏–ª–∏ 0.57, —á—Ç–æ —É–∂–µ –æ—á–µ–Ω—å –∏ –æ—á–µ–Ω—å –Ω–µ–ø–ª–æ—Ö–æ. –î–∞–ª—å—à–µ, –∑–Ω–∞—á–∏—Ç, –Ω–∞–¥–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –ª–µ—Å–æ–º –Ω–∞ –≥–ª—É–±–∏–Ω–µ 17 –∏ 80 –¥–µ—Ä–µ–≤—å—è–º–∏.

# ~~–í—ã—à–µ —è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –∫–æ–¥, —Ç.–∫. –æ–Ω –¥–æ–ª–≥–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ß—Ç–æ–±—ã –≤—ã –Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –≤–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–∏—Å—å.~~

# ~~
# –ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞
# –õ—É—á—à–∞—è –≥–ª—É–±–∏–Ω–∞:  9
# –õ—É—á—à–µ–µ –∫–æ–ª-–≤–æ:  60
# R2 –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö:  -0.7142392066291492
# R2 –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ:  0.5304141028148517
# R2 –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ:  0.37344763273842085
# CPU times: user 2min 34s, sys: 2.48 s, total: 2min 37s
# Wall time: 2min 37s \
# ~~

# ~~–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ. –°–∞–º—ã–µ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–∏–ª–∏—Å—å —É –º–æ–¥–µ–ª–∏ —Ä–µ—à–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É –Ω–∏—Ö —Å F1-–º–µ—Ä–æ–π, –≤—ã–±–µ—Ä–µ–º –ª—É—á—à–∏–π –∏ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ.~~

# In[28]:


print('–î–µ—Ä–µ–≤–æ')
print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
print(confusion_matrix(target_valid, predicted_valid_DTC))
print('–ü–æ–ª–Ω–æ—Ç–∞: ', recall_score(target_valid, predicted_valid_DTC))
print('–¢–æ—á–Ω–æ—Å—Ç—å: ', precision_score(target_valid, predicted_valid_DTC))
print('F1-–º–µ—Ä–∞: ', f1_score(target_valid, predicted_valid_DTC))
print('')

print('–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è')
print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:')
print(confusion_matrix(target_valid, predicted_valid_LR))
print('–ü–æ–ª–Ω–æ—Ç–∞: ', recall_score(target_valid, predicted_valid_LR))
print('–¢–æ—á–Ω–æ—Å—Ç—å: ', precision_score(target_valid, predicted_valid_LR))
print('F1-–º–µ—Ä–∞: ', f1_score(target_valid, predicted_valid_LR))
print('')

#–¥–æ–±–∞–≤–∏–ª –ª–µ—Å
print('–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å')
print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:')
print(confusion_matrix(target_valid, predicted_valid_RFC))
print('–ü–æ–ª–Ω–æ—Ç–∞: ', recall_score(target_valid, predicted_valid_RFC))
print('–¢–æ—á–Ω–æ—Å—Ç—å: ', precision_score(target_valid, predicted_valid_RFC))
print('F1-–º–µ—Ä–∞: ', f1_score(target_valid, predicted_valid_RFC))


# –ú–æ–¥–µ–ª—å –ª–µ—Å–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ—Ö. –¢—É—Ç –∏ –ø–æ–ª–Ω–æ—Ç–∞ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –ø—Ä–∏–Ω—è–ª–∏ —Ö–æ—Ä–æ—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è, –∏ F1-–º–µ—Ä–∞, –º–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≥–æ—Ä–∞–∑–¥–æ –±–ª–∏–∂–µ –∫ —Ç—Ä–µ–±—É–µ–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ 0.59. –° —ç—Ç–∏–º –º–æ–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å.

# ## –ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º

# –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ. –ú—ã —ç—Ç–æ –≤—ã—è—Å–Ω–∏–ª–∏ –µ—â—ë –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, –Ω–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –≤–∑–≤–µ—Å–∏—Ç—å –∫–ª–∞—Å—Å—ã –≤ –º–æ–¥–µ–ª–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏.

# In[29]:


#–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º
try:
    model_LR_b = LogisticRegression(class_weight='balanced', random_state = 12345, solver='liblinear')
    model_LR_b.fit(features_train, target_train)
    predicted_valid_LR_b = model_LR_b.predict(features_valid)
    print('–ú–æ–¥–µ–ª—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')


# In[30]:


#–∏ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Å –¥–µ—Ä–µ–≤–æ–º
try:
    model_DTC_b = DecisionTreeClassifier(class_weight='balanced', random_state=12345)
    model_DTC_b.fit(features_train, target_train)
    predicted_valid_DTC_b = model_DTC_b.predict(features_valid)
    print('–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c –±–∞–ª–∞–Ω—Å–æ–º –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')


# In[31]:


#–Ω—É –∏ –ª–µ—Å —Ç–æ–∂–µ —Ç–µ–ø–µ—Ä—å
try:
    model_RFC_b = RandomForestClassifier(random_state=12345, n_estimators=50, max_depth=18, class_weight='balanced')
    model_RFC_b.fit(features_train, target_train)
    predicted_valid_RFC_b = model_RFC_b.predict(features_valid)
    print('–ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!')


# In[32]:


print('–î–µ—Ä–µ–≤–æ —Å –≤–µ—Å–∞–º–∏')
print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
print(confusion_matrix(target_valid, predicted_valid_DTC_b))
print('–ü–æ–ª–Ω–æ—Ç–∞: ', recall_score(target_valid, predicted_valid_DTC_b))
print('–¢–æ—á–Ω–æ—Å—Ç—å: ', precision_score(target_valid, predicted_valid_DTC_b))
print('F1-–º–µ—Ä–∞: ', f1_score(target_valid, predicted_valid_DTC_b))
print('')

print('–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –≤–µ—Å–∞–º–∏')
print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:')
print(confusion_matrix(target_valid, predicted_valid_LR_b))
print('–ü–æ–ª–Ω–æ—Ç–∞: ', recall_score(target_valid, predicted_valid_LR_b))
print('–¢–æ—á–Ω–æ—Å—Ç—å: ', precision_score(target_valid, predicted_valid_LR_b))
print('F1-–º–µ—Ä–∞: ', f1_score(target_valid, predicted_valid_LR_b))
print('')
#–¥–æ–±–∞–≤–∏–ª –ª–µ—Å
print('–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å')
print('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:')
print(confusion_matrix(target_valid, predicted_valid_RFC_b))
print('–ü–æ–ª–Ω–æ—Ç–∞: ', recall_score(target_valid, predicted_valid_RFC_b))
print('–¢–æ—á–Ω–æ—Å—Ç—å: ', precision_score(target_valid, predicted_valid_RFC_b))
print('F1-–º–µ—Ä–∞: ', f1_score(target_valid, predicted_valid_RFC_b))


# –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —ç—Ç–∏–º –º–µ—Ç–æ–¥–æ–º –ø–æ–º–æ–≥–ª–∞ –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ 0.5 –¥–ª—è F1-–º–µ—Ä—ã, –Ω–æ –¥–µ—Ä–µ–≤–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –ª—É—á—à–µ, –∞ –ª–µ—Å –µ—â—ë –ª—É—á—à–µ. –£ –Ω–µ–≥–æ —É–∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä F1 ‚Äì 0.5681

# –ú—ã –æ–ø—Ä–æ–±—É–µ–º –¥–≤–∞ –º–µ—Ç–æ–¥–∞ - –∞–ø—Å—ç–º–ø–ª–∏–Ω–≥ –∏ –¥–∞—É–Ω—Å—ç–º–ø–ª–∏–Ω–≥ –≤—ã–±–æ—Ä–æ–∫. –ù–∞—á–Ω—ë–º —Å —É–≤–µ–ª–∏—á–µ–Ω–∏—è.

# In[33]:


#—Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏
def upsample(features, target, repeat):
    features_zeros = features[target == 0]
    features_ones = features[target == 1]
    target_zeros = target[target == 0]
    target_ones = target[target == 1]

    features_upsampled = pd.concat([features_zeros] + [features_ones] * repeat)
    target_upsampled = pd.concat([target_zeros] + [target_ones] * repeat)
    
    features_upsampled, target_upsampled = shuffle(
        features_upsampled, target_upsampled, random_state=12345)
    
    return features_upsampled, target_upsampled


# In[34]:


target_train.value_counts()


# –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - 1219, –Ω—É–ª–µ–≤—ã—Ö - 4781. –ó–Ω–∞—á–∏—Ç, –Ω–∞–º –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞ 4, —á—Ç–æ–±—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä–∫—É.

# In[35]:


features_upsampled, target_upsampled = upsample(features_train, target_train, 4)


# In[36]:


target_upsampled.value_counts()


# –¢–µ–ø–µ—Ä—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è, –∏ –æ–Ω–∏ —É –Ω–∞—Å —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã —Å–ª—É—á–∞–π–Ω–æ. –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–ª—å—à–µ!

# In[37]:


print(features_upsampled.shape)
print(target_upsampled.shape)

print(features_train.shape)
print(target_train.shape)


# In[39]:


# try:
#     model_DTC_b = DecisionTreeClassifier(random_state=12345, class_weight='balanced')
#     model_DTC_b.fit(features_upsampled,target_upsampled)
#     predicted_valid_DTC_b = model_DTC_b.predict(features_valid)
#     print('–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –æ–±—É—á–µ–Ω–∞!')
# except:
#     print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')


# In[40]:


# print("F1 up:", f1_score(target_valid, predicted_valid_DTC_b))


# In[1]:


#–æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –Ω–∞ –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
try:
    model_RFC_b = RandomForestClassifier(random_state=12345, n_estimators=70, max_depth=18, class_weight='balanced')
    model_RFC_b.fit(features_upsampled,target_upsampled)
    predicted_valid_RFC_b = model_RFC_b.predict(features_valid)
    print('–ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–æ–º –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!')


# In[48]:


print("F1 up:", f1_score(target_valid, predicted_valid_RFC_b))


# –û–≥–æ! –ü–æ–ª—É—á–∏–ª–∏ 0.59. –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —Ç–æ, —á–Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ.
# –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë –¥—Ä—É–≥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏, –≤–¥—Ä—É–≥ –±—É–¥–µ—Ç –ª—É—á—à–µ. –ê –ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–µ–º –¥–∞—É–Ω—Å—ç–º–ø–ª–∏–Ω–≥. Data science ‚Äì —ç—Ç–æ –∂–µ —ç—ç—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã!

# In[43]:


# best_f1 = 0
# best_rep = 0
# #–ø–µ—Ä–µ–±—Ä–∞–ª —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —ç—Ç–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ª—É—á—à–∏–º–∏
# for rep in range(2,20,1):
#     features_upsampled, target_upsampled = upsample(features_train, target_train, rep)
#     try:
#         model_DTC_b = DecisionTreeClassifier(class_weight='balanced',random_state=12345)
#         model_DTC_b.fit(features_upsampled,target_upsampled)
#         predicted_valid_DTC_b = model_DTC_b.predict(features_valid)
#         #print(rep, '–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –æ–±—É—á–µ–Ω–∞!')
#     except:
#         print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')
#     if f1_score(target_valid, predicted_valid_DTC_b) > best_f1:
#         best_rep = rep
#         best_f1 = f1_score(target_valid, predicted_valid_DTC_b)
#         print("F1 ", best_rep," up:", f1_score(target_valid, predicted_valid_DTC_b))
        
# print("–õ—É—á—à–∏–π F1 ", best_rep," up:", best_f1)


# In[49]:


best_f1 = 0
best_rep = 0
#–ø–µ—Ä–µ–±—Ä–∞–ª —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —ç—Ç–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ª—É—á—à–∏–º–∏
for rep in range(2,15,1):
    features_upsampled, target_upsampled = upsample(features_train, target_train, rep)
    try:
        model_RFC_b = RandomForestClassifier(random_state=12345, n_estimators=80, max_depth=14, class_weight='balanced')
        model_RFC_b.fit(features_upsampled,target_upsampled)
        predicted_valid_RFC_b = model_RFC_b.predict(features_valid)
        #print(rep, '–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –æ–±—É—á–µ–Ω–∞!')
    except:
        print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')
    if f1_score(target_valid, predicted_valid_RFC_b) > best_f1:
        best_rep = rep
        best_f1 = f1_score(target_valid, predicted_valid_RFC_b)
        print("F1 ", best_rep," up:", f1_score(target_valid, predicted_valid_RFC_b))
        
print("–õ—É—á—à–∏–π F1 ", best_rep," up:", best_f1)


# –ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π, –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 8 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö –≤–º–µ—Å—Ç–æ 4. –ù–æ –ø–æ—Ç–µ—Ä—è–µ–º –≤ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ—ç—Ç–æ–º—É, –æ—Å—Ç–∞–≤–∏–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–æ–º –≤ 4 —Ä–∞–∑–∞, —ç—Ç–æ –∏ –ª–æ–≥–∏—á–Ω–µ–µ, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ä–æ—à–∏–π.

# –ú—ã –ø—Ä–∏–º–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ 0.62238 –Ω–∞ 4 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥–æ–º.

# In[50]:


#—Ñ—É–Ω–∫—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏
def downsample(features, target, fraction):
    features_zeros = features[target == 0]
    features_ones = features[target == 1]
    target_zeros = target[target == 0]
    target_ones = target[target == 1]

    features_downsampled = pd.concat(
        [features_zeros.sample(frac=fraction, random_state=12345)] + [features_ones])
    target_downsampled = pd.concat(
        [target_zeros.sample(frac=fraction, random_state=12345)] + [target_ones])
    
    features_downsampled, target_downsampled = shuffle(
        features_downsampled, target_downsampled, random_state=12345)
    
    return features_downsampled, target_downsampled


# In[51]:


target_train.value_counts()


# –ù–µ –∑–Ω–∞—é, –∑–∞—á–µ–º —è –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è—é. –ù—É–ª–µ–π —É –Ω–∞—Å –≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ. –ó–Ω–∞—á–∏—Ç, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏—Ö –≤ 4 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ, —á—Ç–æ–±—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä–∫—É. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±—É–¥–µ—Ç 0.25.

# In[52]:


features_downsampled, target_downsampled = downsample(features_train, target_train, 0.25)


# In[53]:


target_downsampled.value_counts()


# –¢–∞–∫-—Ç–æ –ª—É—á—à–µ!

# In[54]:


# try:
#     model_DTC_b = DecisionTreeClassifier(random_state=12345, class_weight='balanced')
#     model_DTC_b.fit(features_downsampled,target_downsampled)
#     predicted_valid_DTC_b = model_DTC_b.predict(features_valid)
#     print('–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –æ–±—É—á–µ–Ω–∞!')
# except:
#     print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')


# In[55]:


# print("F1 down:", f1_score(target_valid, predicted_valid_DTC_b))


# In[56]:


#–æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
try:
    model_RFC_b = RandomForestClassifier(random_state=12345, n_estimators=80, max_depth=14, class_weight='balanced')
    model_RFC_b.fit(features_downsampled,target_downsampled)
    predicted_valid_RFC_b = model_RFC_b.predict(features_valid)
    print('–ú–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º –∏ –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥–æ–º –æ–±—É—á–µ–Ω–∞!')
except:
    print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞!')


# In[57]:


print("F1 up:", f1_score(target_valid, predicted_valid_RFC_b))


# –ò –∑–¥–µ—Å—å –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–¥–∞—á–µ –ø–∞—Ä–∞–º–µ—Ç—Ä F1 –≤ 0.59. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º. –ù—É —Ç–∞–∫, –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏.

# In[53]:


# #–ø–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–∂–µ –ø–æ–∏–≥—Ä–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –°—Ç–∞—Ä—Ç—É–µ–º —Å—Ä–∞–∑—É —Å F1 = 0.5, –º–µ–Ω—å—à–µ –Ω–∞–º –≤–æ–æ–±—â–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
# best_f1 = 0.5
# best_fr = 0

# #–ø–µ—Ä–µ–±—Ä–∞–ª —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —ç—Ç–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ª—É—á—à–∏–º–∏
# for fr in np.arange(0.1,0.5,0.005):
#     features_downsampled, target_downsampled = downsample(features_train, target_train, fr)
#     try:
#         model_DTC_b = DecisionTreeClassifier(random_state=12345)
#         model_DTC_b.fit(features_downsampled,target_downsampled)
#         predicted_valid_DTC_b = model_DTC_b.predict(features_valid)
#         #print(round(fr,2),'–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –æ–±—É—á–µ–Ω–∞!')
#     except:
#         print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')
        
#     if f1_score(target_valid, predicted_valid_DTC_b) > best_f1:
#         best_fr = fr
#         best_f1 = f1_score(target_valid, predicted_valid_DTC_b)
#         print("F1 ", round(fr,3)," up:", f1_score(target_valid, predicted_valid_DTC_b))

# print("–õ—É—á—à–∏–π F1 ", round(best_fr,3)," up:", best_f1)


# In[58]:


#–ø–æ–ø—Ä–æ–±—É–µ–º —Ç–æ–∂–µ –ø–æ–∏–≥—Ä–∞—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –°—Ç–∞—Ä—Ç—É–µ–º —Å—Ä–∞–∑—É —Å F1 = 0.59, –º–µ–Ω—å—à–µ –Ω–∞–º –≤–æ–æ–±—â–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
best_f1 = 0.59
best_fr = 0

#–ø–µ—Ä–µ–±—Ä–∞–ª —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —ç—Ç–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –ª—É—á—à–∏–º–∏
for fr in np.arange(0.25,0.5,0.005):
    features_downsampled, target_downsampled = downsample(features_train, target_train, fr)
    try:
        model_RFC_b = RandomForestClassifier(random_state=12345, n_estimators=80, max_depth=14, class_weight='balanced')
        model_RFC_b.fit(features_downsampled,target_downsampled)
        predicted_valid_RFC_b = model_RFC_b.predict(features_valid)
        #print(round(fr,2),'–ú–æ–¥–µ–ª—å –æ–±—É—á–∞—é—â–µ–≥–æ –¥–µ—Ä–µ–≤–∞ c —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π –æ–±—É—á–µ–Ω–∞!')
    except:
        print('–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞, –∏—â–∏ –æ—à–∏–±–∫–∏!')
        
    if f1_score(target_valid, predicted_valid_RFC_b) > best_f1:
        best_fr = fr
        best_f1 = f1_score(target_valid, predicted_valid_RFC_b)
        print("F1 ", round(fr,3)," up:", f1_score(target_valid, predicted_valid_RFC_b))

print("–õ—É—á—à–∏–π F1 ", round(best_fr,3)," up:", best_f1)


# –®–∏–∫–∞—Ä–Ω–æ. –î–æ—Å—Ç–∏–≥–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è F1 - 0.6312 –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω—É–ª–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ –ø–æ—á—Ç–∏ –≤ 2 —Ä–∞–∑–∞ –≤–º–µ—Å—Ç–æ 4 —Ä–∞–∑. –≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ, —Ç.–∫. –º—ã –Ω–µ —Ç–∞–∫ —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç, –∑–∞ –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–∑—å–º—ë–º —Å–ª–µ–¥—É—é—â–µ–µ:**
# - –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
# - –ì–ª—É–±–∏–Ω–∞: 14
# - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤: 80
# - –ë–∞–ª–∞–Ω—Å: —Å –ø–æ–º–æ—â—å—é –¥–∞—É–Ω—Å—ç–º–ø–ª–∏–Ω–≥–∞ –≤ 2 —Ä–∞–∑–∞ (0.455)
# - F1: 0.632302405

# ~~–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –≤ 0.59. –í–æ–∑–º–æ–∂–Ω–æ, —è –Ω–µ —É—á—ë–ª –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –Ω–µ –≤—Å–ø–æ–º–Ω–∏–ª –æ –∫–∞–∫–∏—Ö-—Ç–æ –º–µ—Ç–æ–¥–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. –ù–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç 0.5838 —Å—á–∏—Ç–∞—é —Ö–æ—Ä–æ—à–∏–º, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –∏ –±—É–¥—É –Ω–∞–¥–µ—è—Ç—å—Å—è, —á—Ç–æ —Ä–µ–≤—å—é–≤–µ—Ä –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –≥–¥–µ —è –æ—à–∏–±—Å—è (—Ö–æ—Ç—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ç–∞–∫–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –º—ã –∂–µ –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —É—á–∏–º—Å—è, –ø—Ä–∞–≤–¥–∞?).~

# ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

# –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ –µ—â—ë —Ä–∞–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –º—ã –≤—ã–±—Ä–∞–ª–∏.

# In[60]:


get_ipython().run_cell_magic('time', '', "try:\n    features_downsampled, target_downsampled = downsample(features_train, target_train, 0.49)\n    model = RandomForestClassifier(random_state=12345, n_estimators=80, max_depth=14, class_weight='balanced')\n    model.fit(features_downsampled,target_downsampled)\n    predicted_test = model.predict(features_test)\n    print('–ò—Ç–æ–≥–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–¥–µ–ª–∞–Ω—ã')\nexcept:\n    print('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')\n\nprint('F1 test:', f1_score(target_test, predicted_test))")


# In[63]:


print('F1:',f1_score(target_test, predicted_test))
print('–¢–æ—á–Ω–æ—Å—Ç—å:',precision_score(target_test, predicted_test))
print('–ü–æ–ª–Ω–æ—Ç–∞:',recall_score(target_test, predicted_test))


# –ù–µ–∏–¥–µ–∞–ª—å–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ. –ú—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–Ω–æ, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —É–π–¥—ë—Ç, –≤ 61% —Å–ª—É—á–∞—è—Ö. –ò–¥–µ–∞–ª—å–Ω–æ –±—ã–ª–æ –±—ã 100%, –Ω–æ —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.

# In[64]:


predictions_train = model.predict(features_train)
predictions_valid = model.predict(features_valid) 

print("MAE –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: ", mean_absolute_error(target_train,predictions_train))
print("MAE –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ: ", mean_absolute_error(target_valid, predictions_valid))
print("MAE –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: ", mean_absolute_error(target_test, predicted_test))


# –í —Å—Ä–µ–¥–Ω–µ–º, –º—ã –æ—à–∏–±–∞–µ–º—Å—è –Ω–∞ 0.16. –¢.–∫. –Ω–∞—à–∏ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ 0 –∏ 1, —Ç–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –º—ã –æ—à–∏–±–∞–µ–º—Å—è –∏ –≤ —Å–ª—É—á–∞–µ 0, –∏ –≤ —Å–ª—É—á–∞–µ 1, —Ç–æ –µ—Å—Ç—å, —Å—É–º–º–∞—Ä–Ω–æ –æ–∫–æ–ª–æ 32%, —á—Ç–æ –∫–∞–∫ —Ä–∞–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–Ω–æ—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.

# In[65]:


probabilities_test = model.predict_proba(features_test)
precision, recall, thresholds = precision_recall_curve(target_test, probabilities_test[:, 1])

plt.figure(figsize=(5, 5))
plt.step(recall, precision, where='post')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.ylim([0.0, 1.05])
plt.xlim([0.0, 1.0])
plt.title('–ö—Ä–∏–≤–∞—è Precision-Recall')
plt.show() 


# In[66]:


probabilities_test = model.predict_proba(features_test)
probabilities_one_test = probabilities_test[:, 1]

fpr, tpr, thresholds = roc_curve(target_test, probabilities_one_test) 

plt.figure()

plt.plot(fpr, tpr)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.0])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC-–∫—Ä–∏–≤–∞—è')
# ROC-–∫—Ä–∏–≤–∞—è —Å–ª—É—á–∞–π–Ω–æ–π –º–æ–¥–µ–ª–∏ (–≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä—è–º–∞—è)
plt.plot([0, 1], [0, 1], linestyle='--')
plt.show();


# In[60]:


probabilities_test = model.predict_proba(features_test)
probabilities_one_test = probabilities_test[:, 1]

auc_roc = roc_auc_score(target_test, probabilities_one_test)

print(auc_roc);


# –ù–∞—à–∞ –º–æ–¥–µ–ª—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–π –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ. –ó–Ω–∞—á–∏—Ç, –æ–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–∞—á–µ. –ò —Ç.–∫. –æ–Ω–∞ –ª–µ–∂–∏—Ç —Å–≤–µ—Ä—Ö—É –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞, —Ç–æ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–Ω–∞ –ª—É—á—à–µ. –ü–ª–æ—â–∞–¥—å –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º –Ω–∞—à–µ–π –º–æ–¥–µ–ª—å—é —Ä–∞–≤–Ω–∞ 0.84, –∞ —É —Å–ª—É—á–∞–π–Ω–æ–π –º–æ–¥–µ–ª–∏ ‚Äî 0.5. –ó–Ω–∞—á–∏—Ç, –º—ã –Ω–∞ 34% –ª—É—á—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–µ–∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, –≤–µ—Å—å–º–∞ –Ω–µ–ø–ª–æ—Ö–æ. 
# 
# –ê –µ—Å–ª–∏ –Ω–∞–º —É–¥–∞—Å—Ç—Å—è –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å 60% –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫—Ç–æ —Ö–æ—á–µ—Ç —É–π—Ç–∏ –∏ —Ö–æ—Ç—è –±—ã 50% –æ—Å—Ç–∞–≤–∏—Ç—å (–º—ã –Ω–µ –∑–Ω–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫–æ–π), —ç—Ç–æ –æ—á–µ–Ω—å –∏ –æ—á–µ–Ω—å –Ω–µ–ø–ª–æ—Ö–æ, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å!

# ## –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

# –ü–æ—Å—Ç–∞–≤—å—Ç–µ 'x' –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ Shift+Enter.

# - [x]  Jupyter Notebook –æ—Ç–∫—Ä—ã—Ç
# - [x]  –í–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
# - [x]  –Ø—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 1: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 2: –∑–∞–¥–∞—á–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞
#     - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
#     - [x]  –ò–∑—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ –±–µ–∑ —É—á—ë—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
#     - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 3: —É—á—Ç—ë–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å
#     - [x]  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º
#     - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 4: –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# - [x]  –£–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å *F1*-–º–µ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 0.59
# - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ *AUC-ROC*
